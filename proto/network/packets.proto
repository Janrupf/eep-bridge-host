syntax = "proto3";

package net.janrupf.eep.network.protocol;

import "network/definitions.proto";

/// Initial handshake message, this is the first packet sent by the client.
message Handshake {
  /// Version of the client, purely informational.
  Version client_version = 1;

  /// Identifier of the client, purely informational.
  string client_identifier = 2;

  /// Version of the protocol used by the client, this has to be supported by the server.
  Version protocol_version = 3;

  /// The current project the host should load or create for this client.
  string project_identifier = 4;
}

/// Message sent by the server if the handshake succeeded.
message HandshakeSuccessful {}

/// Message sent by the server if the handshake failed.
message HandshakeFailure {
  /// The reason why the handshake failed.
  string reason = 1;
}

/// Response to the handshake by the server.
message HandshakeResponse {
  oneof result {
    HandshakeSuccessful success = 1;
    HandshakeFailure failure = 2;
  }
}

/// Client to server Heartbeat
message Heartbeat {
  uint64 internal_ticks = 1;

  uint32 eep_time = 2;
  uint32 eep_time_hour = 3;
  uint32 eep_time_minute = 4;
  uint32 eep_time_second = 5;
}

/// Possible types of objects to set
enum ObjectType {
  SWITCH = 0;
  SIGNAL = 1;
}

/// Message sent by the server to set a certain control object state in the client.
message SetControlObject {
  /// The type of the object
  ObjectType type = 1;

  /// The id of the object
  uint32 object_id = 2;

  /// The state of the object
  uint32 state = 3;
}

/// Message sent by the server to control whether the simulation should be pause.
message SetPauseState {
  /// If true, the simulation should be paused
  bool pause = 1;
}
